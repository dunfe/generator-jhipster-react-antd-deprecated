<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useState, useEffect } from 'react';
import { Button, Form, Input, Typography, Row, Col } from 'antd';
import { Translate, translate, getUrlParameter } from 'react-jhipster';
import { RouteComponentProps } from 'react-router-dom';
import { toast } from 'react-toastify';

import { handlePasswordResetFinish, reset } from '../password-reset.reducer';
import PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';
import { useAppDispatch, useAppSelector } from 'app/config/store';

const { Title } = Typography;
export const PasswordResetFinishPage = (props: RouteComponentProps<{ key: string }>) => {
  const [password, setPassword] = useState('');
  const [key] = useState(getUrlParameter('key', props.location.search));
  const dispatch = useAppDispatch();

  useEffect(
    () => () => {
      dispatch(reset());
    },
    []
  );

  const handleValidSubmit = ({ newPassword }) => dispatch(handlePasswordResetFinish({ key, newPassword }));

  const updatePassword = event => setPassword(event.target.value);

  const getResetForm = () => {
    return (
      <Form onFinish={handleValidSubmit} layout={'vertical'}>
        <Form.Item
          name="newPassword"
          label={translate('global.form.newpassword.label')}
          rules={[
            {
              required: true,
              message: translate('global.messages.validate.newpassword.required'),
            },
            {
              min: 4,
              message: translate('global.messages.validate.newpassword.minlength'),
            },
            {
              max: 50,
              message: translate('global.messages.validate.newpassword.maxlength'),
            },
          ]}
          data-cy="resetPassword"
        >
          <Input.Password onChange={updatePassword} placeholder={translate('global.form.newpassword.placeholder')} />
        </Form.Item>
        <PasswordStrengthBar password={password} />
        <Form.Item
          name="confirmPassword"
          label={translate('global.form.confirmpassword.label')}
          rules={[
            {
              required: true,
              message: translate('global.messages.validate.confirmpassword.required'),
            },
            {
              min: 4,
              message: translate('global.messages.validate.confirmpassword.minlength'),
            },
            {
              max: 50,
              message: translate('global.messages.validate.confirmpassword.maxlength'),
            },
            ({ getFieldValue }) => ({
              validator(_, value) {
                if (!value || getFieldValue('newPassword') === value) {
                  return Promise.resolve();
                }
                return Promise.reject(new Error('The two passwords that you entered do not match!'));
              },
            }),
          ]}
        >
          <Input.Password placeholder={translate('global.form.confirmpassword.placeholder')} />
        </Form.Item>
        <Button color="success" type="primary" htmlType="submit">
          <Translate contentKey="reset.finish.form.button">Validate new password</Translate>
        </Button>
      </Form>
    );
  };

  const successMessage = useAppSelector(state => state.passwordReset.successMessage);

  useEffect(() => {
    if (successMessage) {
<%_ if (enableTranslation) { _%>
      toast.success(translate(successMessage));
<%_ } else { _%>
      toast.success(successMessage);
<%_ } _%>
    }
  }, [successMessage]);

  return (
    <div>
      <Row justify="center">
        <Col span="8">
          <h1>
            <Translate contentKey="reset.finish.title">Reset password</Translate>
          </h1>
          <div>{key ? getResetForm() : null}</div>
        </Col>
      </Row>
    </div>
  );
};

export default PasswordResetFinishPage;
