<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useState, useEffect } from 'react';
import { Translate, translate } from 'react-jhipster';
import { Row, Col, Button, Form, Input } from 'antd';
import { toast } from 'react-toastify';

import PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';
import { useAppDispatch, useAppSelector } from 'app/config/store';
import { handleRegister, reset } from './register.reducer';

export const RegisterPage = () => {
  const [password, setPassword] = useState('');
  const dispatch = useAppDispatch();

  useEffect(
    () => () => {
      dispatch(reset());
    },
    []
  );

<%_ if (enableTranslation) { _%>
  const currentLocale = useAppSelector(state => state.locale.currentLocale);
<%_ } _%>

  const handleValidSubmit = ({ username, email, firstPassword }) => {
<%_ if (enableTranslation) { _%>
    dispatch(handleRegister({ login: username, email, password: firstPassword, langKey: currentLocale }));
<%_ } else { _%>
    dispatch(handleRegister({ login: username, email, password: firstPassword, langKey: 'en' }));
<%_ } _%>
  };

  const updatePassword = event => setPassword(event.target.value);

  const successMessage = useAppSelector(state => state.register.successMessage);

  useEffect(() => {
    if (successMessage) {
<%_ if (enableTranslation) { _%>
      toast.success(translate(successMessage));
<%_ } else { _%>
      toast.success(successMessage);
<%_ } _%>
    }
  }, [successMessage]);

  return (
    <div>
      <Row justify="center">
        <Col span="8">
          <h1 id="register-title" data-cy="registerTitle">
            <Translate contentKey="register.title">Registration</Translate>
          </h1>
        </Col>
      </Row>
      <Row justify="center">
        <Col span="8">
          <Form onFinish={handleValidSubmit} layout={'vertical'}>
            <Form.Item
              name="username"
              label={'Tên đăng nhập'}
              rules={[
                {
                  required: true,
                  message: 'Bạn phải nhập tên tài khoản.',
                },
                {
                  pattern: new RegExp(/^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$/),
                  message: 'Your username is invalid.',
                },
                {
                  min: 1,
                  message: 'Tên tài khoản phải có ít nhất 1 ký tự.',
                },
                {
                  max: 50,
                  message: 'Tên tài khoản không được vượt quá 50 ký tự.',
                },
              ]}
            >
              <Input placeholder={'Tên tài khoản'} />
            </Form.Item>
            <Form.Item
              name="email"
              label={'Email'}
              rules={[
                {
                  required: true,
                  message: 'Bạn phải nhập email.',
                },
                {
                  min: 5,
                  message: 'Email phải có ít nhất 5 ký tự.',
                },
                {
                  max: 254,
                  message: 'Email không được vượt quá 50 ký tự.',
                },
                {
                  type: 'email',
                  message: 'Email bạn nhập không hợp lệ.',
                },
              ]}
            >
              <Input placeholder={'Nhập email của bạn'} />
            </Form.Item>
            <Form.Item
              name="firstPassword"
              label={'Mật khẩu mới'}
              rules={[
                {
                  required: true,
                  message: 'Bạn phải nhập mật khẩu.',
                },
                {
                  min: 4,
                  message: 'Mật khẩu phải có ít nhất 4 ký tự.',
                },
                {
                  max: 50,
                  message: 'Mật khẩu phải có ít nhất 4 ký tự.',
                },
              ]}
            >
              <Input.Password onChange={updatePassword} placeholder={'Nhập mật khẩu mới'} />
            </Form.Item>
            <PasswordStrengthBar password={password} />
            <Form.Item
              name="secondPassword"
              label={'Xác nhận'}
              rules={[
                {
                  required: true,
                  message: 'Bạn phải nhập lại mật khẩu để xác nhận.',
                },
                {
                  min: 4,
                  message: 'Mật khẩu phải có ít nhất 4 ký tự.',
                },
                {
                  max: 50,
                  message: 'Mật khẩu không được vượt quá 50 ký tự.',
                },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || getFieldValue('firstPassword') === value) {
                      return Promise.resolve();
                    }
                    return Promise.reject(new Error('Xác nhận mật khẩu không khớp!'));
                  },
                }),
              ]}
            >
              <Input.Password placeholder={'Nhập lại mật khẩu mới'} />
            </Form.Item>
            <Form.Item>
              <Button id="register-submit" type="primary" htmlType="submit">
                Đăng ký
              </Button>
            </Form.Item>
          </Form>
        </Col>
      </Row>
    </div>
  );
}

export default RegisterPage;
