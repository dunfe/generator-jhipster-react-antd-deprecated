<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useState, useEffect } from 'react';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, Card, Typography, Form, Input, Checkbox, Select, Space } from 'antd';
import { Translate, translate } from 'react-jhipster';

<%_ if (enableTranslation) { _%>
import { locales, languages } from 'app/config/translation';
<%_ } _%>
import { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';
import { useAppDispatch, useAppSelector } from 'app/config/store';

const { Title } = Typography;
export const UserManagementUpdate = (props: RouteComponentProps<{ login: string }>) => {
    const [isNew] = useState(!props.match.params || !props.match.params.login);
    const dispatch = useAppDispatch();
    const [form] = Form.useForm();

    useEffect(() => {
        if (isNew) {
            dispatch(reset());
        } else {
            dispatch(getUser(props.match.params.login));
        }
        dispatch(getRoles());
        return () => {
            dispatch(reset());
        };
    }, [props.match.params.login]);

    const handleClose = () => {
        props.history.push('/admin/user-management');
    };

    const saveUser = values => {
        if (isNew) {
            dispatch(createUser(values));
        } else {
            dispatch(updateUser(values));
        }
        handleClose();
    };

    const isInvalid = false;
    const user = useAppSelector(state => state.userManagement.user);
    const loading = useAppSelector(state => state.userManagement.loading);
    const updating = useAppSelector(state => state.userManagement.updating);
    const authorities = useAppSelector(state => state.userManagement.authorities);

    const onFinish = () => {
        form.validateFields()
            .then(values => saveUser(values))
            .catch(error => console.error(error));
    };
    const options = locales.map(locale => {
        return {
            label: languages[locale].name,
            value: locale,
        };
    });

    const profiles = authorities.map(role => {
        return {
            label: role,
            value: role,
        };
    });

    return (
      <Card>
          <Title>
              <Translate contentKey="userManagement.home.createOrEditLabel">Create or edit a User</Translate>
          </Title>
          {loading ? (
              <p>Loading...</p>
          ) : (
              <Form form={form} layout={'vertical'} initialValues={user}>
                  {user.id ? (
                      <Form.Item
                          name="id"
                          rules={[
                              {
                                  required: true,
                              },
                          ]}
                          required
                          label={translate('global.field.id')}
                      >
                          <Input readOnly />
                      </Form.Item>
                  ) : null}
                  <Form.Item
                      name="login"
                      label={translate('userManagement.login')}
                      rules={[
                          {
                              required: true,
                              message: translate('register.messages.validate.login.required'),
                          },
                          {
                              pattern: new RegExp(/<%- LOGIN_REGEX %>/),
                              message: translate('register.messages.validate.login.pattern'),
                          },
                          {
                              min: 1,
                              message: translate('register.messages.validate.login.minlength'),
                          },
                          {
                              max: 50,
                              message: translate('register.messages.validate.login.maxlength'),
                          },
                      ]}
                  >
                      <Input />
                  </Form.Item>
                  <Form.Item
                      name="firstName"
                      label={translate('userManagement.firstName')}
                      rules={[
                          {
                              max: 50,
                              message: translate('entity.validation.maxlength'),
                          },
                      ]}
                  >
                      <Input />
                  </Form.Item>
                  <Form.Item
                      name="lastName"
                      label={translate('userManagement.lastName')}
                      rules={[
                          {
                              max: 50,
                              message: translate('entity.validation.maxlength'),
                          },
                      ]}
                  >
                      <Input />
                  </Form.Item>
                  <Form.Item
                      name="email"
                      label={translate('global.form.email.label')}
                      rules={[
                          {
                              required: true,
                              message: translate('global.messages.validate.email.required'),
                          },
                          {
                              min: 5,
                              message: translate('settings.messages.validate.lastname.minlength'),
                          },
                          {
                              max: 254,
                              message: translate('settings.messages.validate.email.maxlength'),
                          },
                          {
                              type: 'email',
                              message: translate('global.messages.validate.email.invalid'),
                          },
                      ]}
                  >
                      <Input placeholder={translate('global.form.email.placeholder')} />
                  </Form.Item>
                  <Form.Item name="activated" label={translate('userManagement.activated')}>
                      <Checkbox checked value={true} disabled={!user.id} />
                  </Form.Item>
                  <%_ if (enableTranslation) { _%>
                  <Form.Item id="langKey" name="langKey" label={translate('settings.form.language')} data-cy="langKey">
                      <Select id="langKey" options={options} />
                  </Form.Item>
                  <%_ } _%> 
                  <Form.Item name="authorities" label={translate('userManagement.profiles')}>
                      <Select id="authorities" options={profiles} mode="multiple" />
                  </Form.Item>
                  <Form.Item>
                      <Space direction="vertical">
                          <Button type="primary" onClick={onFinish} disabled={isInvalid || updating}>
                              <Translate contentKey="entity.action.save">Save</Translate>
                          </Button>
                          <Button type="link">
                              <Link to="/admin/user-management">
                                  <span className="d-none d-md-inline">
                                      <Translate contentKey="entity.action.back">Cancel</Translate>
                                  </span>
                              </Link>
                          </Button>
                      </Space>
                  </Form.Item>
              </Form>
          )}
      </Card>
  );
};

export default UserManagementUpdate;
