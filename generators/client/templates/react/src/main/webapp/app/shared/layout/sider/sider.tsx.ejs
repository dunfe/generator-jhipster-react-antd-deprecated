import React, { useState<% if (enableI18nRTL) { %>, useEffect<% } %> } from 'react';
import { translate<% if (enableTranslation) { %>, Storage<% } %> } from 'react-jhipster';

<%_ if (enableTranslation && enableI18nRTL) { _%>
    import { isRTL } from 'app/config/translation';
<%_ } _%>

import LoadingBar from 'react-redux-loading-bar';
import { Layout, Menu } from 'antd';
import { Home } from '../header/header-components';
import { AdminMenu, EntitiesMenu, AccountMenu<%_ if (enableTranslation) { _%>, LocaleMenu<%_ } _%> } from '../menus';
import { ApartmentOutlined, ClusterOutlined, GlobalOutlined, HomeOutlined, UserOutlined } from '@ant-design/icons';
import { languages } from 'app/config/translation';

<%_ if (enableTranslation) { _%>
    import { useAppDispatch } from 'app/config/store';
    import { setLocale } from 'app/shared/reducers/locale';
<%_ } _%>

export interface IHeaderProps {
    isAuthenticated: boolean;
    isAdmin: boolean;
    ribbonEnv: string;
    isInProduction: boolean;
    isOpenAPIEnabled: boolean;
    <%_ if (enableTranslation) { _%>
        currentLocale: string;
      <%_ } _%>
}

const { SubMenu } = Menu;
const rootSubmenuKeys = ['entities', 'admin', 'lang', 'account'];

const Sider = (props: IHeaderProps) => {
    const [menuOpen, setMenuOpen] = useState(false);

    const [openKeys, setOpenKeys] = React.useState([]);

    const onOpenChange = keys => {
      const latestOpenKey = keys.find(key => openKeys.indexOf(key) === -1);
      if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {
        setOpenKeys(keys);
      } else {
        setOpenKeys(latestOpenKey ? [latestOpenKey] : []);
      }
    };
    <%_ if (enableI18nRTL) { _%>
        useEffect(() => document.querySelector('html').setAttribute('dir', isRTL(Storage.session.get('locale')) ? 'rtl' : 'ltr'));
      <%_ } _%>

      <%_ if (enableTranslation) { _%>
        const dispatch = useAppDispatch();
      
        const handleLocaleChange = event => {
          const langKey = event.target.value;
          Storage.session.set('locale', langKey);
          dispatch(setLocale(langKey));
        <%_ if (enableI18nRTL) { _%>
          document.querySelector('html').setAttribute('dir', isRTL(langKey) ? 'rtl' : 'ltr');
        <%_ } _%>
        }
      <%_ } _%>

    const toggleMenu = () => setMenuOpen(!menuOpen);

    const [selectedKeys, setSelectedKeys] = useState(['home']);

    const onSelect = ({ key }) => {
        setSelectedKeys([key]);
    };

    /* jhipster-needle-add-element-to-menu - JHipster will add new menu items here */

    return (
        <Layout.Sider width={200} className="site-layout-background" collapsible collapsed={menuOpen} onCollapse={toggleMenu}>
            <LoadingBar className="loading-bar" />
            <Menu mode="vertical" selectedKeys={selectedKeys} openKeys={openKeys} onOpenChange={onOpenChange} onSelect={onSelect} style={{ height: '100%', borderRight: 0 }}>
                <Menu.Item key="home" icon={<HomeOutlined />}>
                    <Home />
                </Menu.Item>
                <SubMenu key="entities" title={translate('global.menu.entities.main')} icon={<ApartmentOutlined />}>
                    {EntitiesMenu}
                </SubMenu>
                <SubMenu key="admin" title={translate('global.menu.admin.main')} icon={<ClusterOutlined />}>
                    {AdminMenu(props.isOpenAPIEnabled)}
                </SubMenu>
                <%_ if (enableTranslation) { _%>
                <SubMenu key="lang" title={props.currentLocale ? languages[props.currentLocale].name : undefined} icon={<GlobalOutlined />}>
                    <LocaleMenu currentLocale={props.currentLocale} />
                </SubMenu>
                <%_ } _%>
                <SubMenu key="account" title={translate('global.menu.account.main')} icon={<UserOutlined />}>
                        {AccountMenu(props.isAuthenticated)}
                </SubMenu>
            </Menu>
        </Layout.Sider>
    );
};

export default Sider;
