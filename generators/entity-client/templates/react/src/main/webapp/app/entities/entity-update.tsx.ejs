<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const i18nToLoad = [entityInstance];
for (const field of fields.filter(field => !field.id)) {
  if (field.fieldIsEnum) {
    i18nToLoad.push(field.enumInstance);
  }
}
_%>
import React, { useState, useEffect } from 'react';
import { Link, RouteComponentProps } from 'react-router-dom';
import {
  Button,
  Form,
  Card,
  Checkbox,
  TimePicker,
  DatePicker,
  Input,
  InputNumber,
  Select,
  Upload,
  Space
} from 'antd';
import {
  isNumber,
  Translate,
  translate,
  ValidatedField,
  ValidatedForm,
  <% if (fieldsContainBlobOrImage) { %> ValidatedBlobField,<% } %>
} from 'react-jhipster';
import dayjs from 'dayjs';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRelationFields = new Set();

Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
    (rel.relationshipOneToOne && rel.ownerSide && !rel.otherEntityUser)
      || !rel.relationshipOneToMany);
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipManyToMany && rel.ownerSide) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key].some(rel => !rel.relationshipOneToMany)) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRelationFields.add(uniqueRel.otherEntityNamePlural);
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
      <%_ if (authenticationTypeOauth2) { _%>
import { getUsers } from 'app/shared/reducers/user-management';
      <%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
      <%_ } _%>
    <%_ } else { _%>
      <%_ if (uniqueRel.otherEntityAngularName !== entityReactName) { _%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
      <%_ } _%>
import { getEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
    <%_ } _%>
  <%_ } _%>
<%_ }); _%>
import {
  getEntity,
  updateEntity,
  createEntity,
  reset
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';
<%_ if (relationships.filter(e => e.relationshipManyToMany) !== undefined) { _%>
import { mapIdList } from 'app/shared/util/entity-utils';
<%_ } _%>
import { useAppDispatch, useAppSelector } from 'app/config/store';

export const <%= entityReactName %>Update = (props: RouteComponentProps<{id: string}>) => {
  const dispatch = useAppDispatch();

  const [isNew] = useState(!props.match.params || !props.match.params.id);

  <%_ otherEntityActions.forEach(val => { _%>
  const <%= val.instance %> = useAppSelector(state => state.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>);
  <%_ }) _%>
  const <%= entityInstance %>Entity = useAppSelector(state => state.<%= entityInstance %>.entity);
  const loading = useAppSelector(state => state.<%= entityInstance %>.loading);
  const updating = useAppSelector(state => state.<%= entityInstance %>.updating);
  const updateSuccess = useAppSelector(state => state.<%= entityInstance %>.updateSuccess);
  const [form] = Form.useForm();
  const [data, setData] = useState({});

  const handleClose = () => {
    props.history.push('/<%= entityFileName %>'<%_ if (paginationPagination) { _%> + props.location.search<%_ } _%>);
  }

  useEffect(() => {
<%_ if (paginationInfiniteScroll) { _%>
    if (!isNew) {
      dispatch(getEntity(props.match.params.id));
    }
<%_ } else { _%>
    if (isNew) {
      dispatch(reset());
    } else {
      dispatch(getEntity(props.match.params.id));
    }
<%_ } _%>

<%_ otherEntityActions.forEach(val => { _%>
    dispatch(<%= val.action %>({}));
<%_ }) _%>
  }, []);

  useEffect(() => {
    if (updateSuccess) {
      handleClose();
    }
  }, [updateSuccess]);

  const saveEntity = values => {
<%_ for (field of fields.filter(field => !field.id)) {
    const fieldName = field.fieldName;
_%>
  <%_ if (field.fieldTypeTimed)  { _%>
    values.<%= fieldName %> = convertDateTimeToServer(values.<%= fieldName %>);
  <%_ } _%>
<%_ } _%>

    const entity = {
      ...<%= entityInstance %>Entity,
      ...values,
<%_ manyToManyOwners.forEach(rel => { _%>
      <%= rel.relationshipFieldNamePlural %>: mapIdList(values.<%= rel.relationshipFieldNamePlural %>),
<%_ }) _%>
<%_ relFieldNames.forEach(rel => { _%>
<%_ if (rel.relationshipManyToOne || (rel.ownerSide && rel.relationshipOneToOne))  { _%>
        <%= rel.relationshipFieldName %>: <%= rel.otherEntityNamePlural %>.find(it => it.<%= rel.otherEntity.primaryKey.name %> === values.<%= rel.relationshipFieldName %>Id),
<%_ } _%>
<%_ }) _%>
    }

    if (isNew) {
      dispatch(createEntity(entity));
    } else {
      dispatch(updateEntity(entity));
    }
  }

  const onFinish = () => {
    form.validateFields().then(values => {
      saveEntity(values)
    })
  };

  useEffect(() => {
    if (!isNew) {
      form.setFieldsValue({
          ...<%= entityInstance %>Entity,
<%_ for (field of fields.filter(field => !field.id)) {
    const fieldType = field.fieldType;
    const fieldName = field.fieldName;
    const fieldNameHumanized = field.fieldNameHumanized;

    if (field.fieldTypeTimed) { _%>
          <%= fieldName %>: <%= entityInstance %>Entity.<%= field.fieldName %> ? dayjs(<%= entityInstance %>Entity.<%= field.fieldName %>) : dayjs(),
  <%_ } else if (field.fieldIsEnum) {
      const enumValues = field.enumValues;
  _%>
          <%= fieldName %>: '<%= enumValues[0].name %>',
  <%_ } _%>
<%_ } _%>
<%_ relationships.forEach(rel => {
    const otherEntityPkName = rel.otherEntity.primaryKey && rel.otherEntity.primaryKey.name || 'id';
    const relationshipFieldName = rel.relationshipFieldName;
    const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
    if (rel.relationshipManyToOne || (rel.relationshipOneToOne && rel.ownerSide)) { _%>
          <%= relationshipFieldName %>Id: <%= entityInstance %>Entity?.<%= relationshipFieldName %>?.id,
  <%_ } else if (rel.relationshipManyToMany && rel.ownerSide) { _%>
          <%= relationshipFieldNamePlural %>: <%= entityInstance %>Entity?.<%= relationshipFieldNamePlural %>?.map(e => e.<%= otherEntityPkName %>),
  <%_ } _%>
<%_ }) _%>
        })
    }
  }, [<%= entityInstance %>Entity])

  return (
    <Card>
        <h2 id="<%= i18nKeyPrefix %>.home.createOrEditLabel">
          <Translate contentKey="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a <%= entityClass %></Translate>
        </h2>
        { loading ? <p>Loading...</p> :
        <Form form={form} layout={'vertical'}>
          { !isNew ?
            <Form.Item
              name="<%= primaryKey.fields[0].fieldName %>"
              id="<%= entityFileName %>-<%= primaryKey.fields[0].fieldName %>"
              label={translate('<%= primaryKey.fields[0].fieldTranslationKey %>')}
              rules={[{ required: true }]}
            >
              <Input disabled={true}/>
            </Form.Item>
            : null
          }
<%_ for (field of fields.filter(field => !field.id)) {
    const fieldType = field.fieldType;
    const fieldName = field.fieldName;
    const fieldNameHumanized = field.fieldNameHumanized;

    if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
          <ValidatedBlobField
    <%_ } else { _%>
            <Form.Item
    <%_ } _%>
  <%_ if (enableTranslation) { _%>
            label={translate('<%= field.fieldTranslationKey %>')}
  <%_ } else { _%>
            label="<%= fieldNameHumanized %>"
  <%_ } _%>
            id="<%= entityFileName %>-<%= fieldName %>"
            name="<%= fieldName %>"
            rules={[
              <%_ if (field.fieldValidationRequired && !field.fieldTypeBoolean) { _%>
                  {required: true, message: translate('entity.validation.required')},
              <%_ } _%>
    <%_ if (field.fieldValidationMinLength) { _%>
            {min: <%= field.fieldValidateRulesMinlength %>, message: translate('entity.validation.minlength', { min: ' + field.fieldValidateRulesMinlength + ' })},
        <%_ } _%>
        <%_  if (field.fieldValidationMaxLength) { _%>
                {max: <%= field.fieldValidateRulesMaxlength %>, message: translate('entity.validation.maxlength', { max: ' + field.fieldValidateRulesMaxlength + ' }) },
            <%_ } _%>
            <%_  if (field.fieldValidationMin) { _%>
                {min: <%= field.fieldValidateRulesMin %>, message: translate('entity.validation.min', { min: ' + field.fieldValidateRulesMin + ' }) },
            <%_ } _%>
            <%_  if (field.fieldValidationMax) { _%>
                {max: <%= field.fieldValidateRulesMax %>, message: translate('entity.validation.max', { max: ' + field.fieldValidateRulesMax + ' }) },
            <%_ } _%>
            <%_  if (field.fieldValidationPattern) { _%>
                {pattern: new RegExp(/<%= field.fieldValidateRulesPatternReact %>/), message: translate('entity.validation.pattern')},
            <%_ } _%>
            <%_  if (field.fieldTypeNumeric) { _%>
                {pattern: new RegExp('^[0-9]*$'), message: translate('entity.validation.number')},
            <%_ } _%>
            ]}
          >
  <%_ if (field.fieldTypeBoolean) { _%>
            <Checkbox />
          </Form.Item>
  <%_ } else if (field.fieldTypeTimed) { _%>
            <TimePicker />
          </Form.Item>
  <%_ } else if (field.fieldTypeLocalDate) { _%>
            <DatePicker />
          </Form.Item>
  <%_ } else if (field.fieldIsEnum) {
    const enumValues = field.enumValues;
    _%>
            <Select >
              <%_ const enumPrefix = frontendAppName + '.'+ fieldType;
                  enumValues.forEach(enumValue => { _%>
                          <Select.Option key={'<%= enumValue.name %>'} value="<%= enumValue.name %>">
                  <%_ if (enableTranslation) { _%>
                            {translate("<%= enumPrefix %>.<%= enumValue.name %>")}
                  <%_ } else { _%>
                            <%= enumValue.value %>
                  <%_ } _%>
                          </Select.Option>
                <%_ }); _%>
              </Select>
          </Form.Item>
  <%_ } else if (field.fieldTypeNumeric) { _%>
          <InputNumber />
          </Form.Item>
  <%_ } else if (field.fieldTypeBinary) { _%>
        <%_ if (!field.blobContentTypeText) {  _%>
                <%_ if (field.blobContentTypeImage) {_%>
                  <Upload {...props}>
                    <Button icon={<UploadOutlined />}>{translate('entity.action.open')}</Button>
                  </Upload>
                <%_ } _%>
              </Form.Item>
        <%_ } else { _%>
              <Input.TextArea />
              </Form.Item>
        <%_ } _%>
  <%_ } else { _%>
          <Input />
        </Form.Item>
  <%_ } _%>
<%_ } _%>
<%_ relationships.forEach(rel => {
    const ownerSide = rel.ownerSide;
    const otherEntityPkName = rel.otherEntity.primaryKey && rel.otherEntity.primaryKey.name || 'id';
    const otherEntityNamePlural = rel.otherEntityNamePlural;
    const relationshipName = rel.relationshipName;
    const relationshipNameHumanized = rel.relationshipNameHumanized;
    const relationshipFieldName = rel.relationshipFieldName;
    const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
    const otherEntityField = rel.otherEntityField;
    const relationshipRequired = rel.relationshipRequired;
    const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
  <%_ if (rel.relationshipManyToOne || (rel.relationshipOneToOne && ownerSide)) { _%>
          <Form.Item
            id="<%= entityFileName %>-<%= relationshipName %>"
            name="<%= relationshipFieldName %>Id"
      <%_ if (enableTranslation) { _%>
            label={translate('<%= translationKey %>')}
      <%_ } else { _%>
            label="<%= relationshipNameHumanized %>"
      <%_ } _%>
            rules={[
              <%_ if (relationshipRequired) { _%>
                {required: true,
                message: <Translate contentKey="entity.validation.required">This field is required.</Translate> }
              <%_ } _%>
            ]}
            >

            <Select showSearch filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}>
              <%_ if (rel.relationshipManyToOne || (rel.relationshipOneToOne && ownerSide)) { _%>
                  {<%= otherEntityNamePlural %>.map(otherEntity => {
                    return <Select.Option key={otherEntity.<%= otherEntityPkName %>} value={otherEntity.<%= otherEntityPkName %>}>{otherEntity.<%= otherEntityField %>}</Select.Option>
                  })}
              <%_ } _%>
            </Select>
          </Form.Item>
  <%_ } else if (rel.relationshipManyToMany && rel.ownerSide) { _%>
          <Form.Item
        <%_ if (enableTranslation) { _%>
            label={translate('<%= i18nKeyPrefix %>.<%= relationshipName %>')}
        <%_ } else { _%>
            label="<%= relationshipNameHumanized %>"
        <%_ } _%>
            id="<%= entityFileName %>-<%= relationshipName %>"
            name="<%= relationshipFieldNamePlural %>"
            >
              <Select showSearch filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}
                mode="multiple"
                allowClear
                style={{ width: '100%' }}
              >
                {
                  (<%= otherEntityNamePlural %>) ? <%= otherEntityNamePlural %>.map(otherEntity =>
                  <Select.Option
                      value={otherEntity.<%= otherEntityPkName %>}
                      key={otherEntity.<%= otherEntityPkName %>}>
                      {otherEntity.<%= otherEntityField %>}
                  </Select.Option>
                  ) : null
                }
              </Select>
          </Form.Item>
  <%_ } _%>
<%_ }) _%>
<Form.Item>
  <Space>
          <Button id="cancel-save">
            <Link to="/<%= entityFileName %>">
              <Translate contentKey="entity.action.back">Back</Translate>
            </Link>
          </Button>
          <Button type="primary" id="save-entity" onClick={onFinish}>
            <Translate contentKey="entity.action.save">Save</Translate>
          </Button>
    </Space>
  </Form.Item>
        </Form>
        }
  </Card>
  );
};

export default <%= entityReactName %>Update;
